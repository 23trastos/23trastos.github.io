[{:type :markdown :value
  "## Welcome to REPL!CA v0.1-alpha:

  The **R**EPL-based **E**xtendable **P**latform
  for **L**ive **I**nteractive
  **C**omposition **A**ssistance,
  or The **R**EPL-based **E**nvironment for **P**lanning your
  **L**ive **I**nteractive **C**oding **A**dventures,
  or... well, just replications of it.

  Special credits to:
  [INScore](https://inscore.grame.fr)
  [ToneJS](https://tonejs.github.io)
  [cljs-browser-repl](https://github.com/joakin/cljs-browser-repl)/
  [replumb](https://github.com/arichiardi/replumb)
  and [CodeMirror](https://codemirror.net)

  - Start a **[new project](#/replica/new)** with default options

  - Follow the **[guided tour](#/replica/tour)**

  - or go and try **[Terry Riley's 'In C' Interactive score](#/replica/riley-inc)**

  If you want to dive first into ClojureScript, then you must visit
  **[Joakin's Introduction](http://chimeces.com/cljs-browser-repl/)**,
  whose browser-repl, by the way, is half of the core of REPL!CA's system.
  "}
 {:type :input :silent? true :deaf? true :value
  "(ns replica.user)\n(require '[replica.core :refer [r rr]])"}
 {:type :stop :resp-enables true :auto-continue true}
 {:type :input :silent? true :deaf? true :value
  "'elf \"rsrc/welcome.replica\" (fn[] (r 'del #(print-str (r 'ep)) 500))"}]
