%%% TERRY RILEY
%%% IN C
%%% for REPL!CA v.0.1a

SCORE
\grace(c1 * 1 / 8) e1 * 1 / 4 \grace(c1 * 1 / 8) e1 * 1 / 4 \grace(c1 * 1 / 8) e1 * 1 / 4
\grace(c1 * 1 / 8) e1 * 1 / 8 f1 * 1 / 8 e1 * 1 / 4
_ * 1 / 8 e1 * 1 / 8 f1 * 1 / 8 e1 * 1 / 8
_ * 1 / 8 e1 * 1 / 8 f1 * 1 / 8 g1 * 1 / 8
e1 * 1 / 8 f1 * 1 / 8 g1 * 1 / 8 _ * 1 / 8
\tieBegin:0 c2 * 1 / 1 c2 * 1 / 1 \tieEnd:0
_ * 1 / 4 _ * 1 / 4 _ * 1 / 4 _ * 1 / 8 c1 * 1 / 16 c1 * 1 / 16 c1 * 1 / 8 _ * 1 / 8 _ * 1 / 4 _ * 1 / 4 _ * 1 / 4 _ * 1 / 4
g1 * 3 / 2 \tieBegin:0 f1 * 1 / 1 f1 * 1 / 1 \tieEnd:0
b1 * 1 / 16 g1 * 1 / 16 _ * 1 / 8 _ * 1 / 4 _ * 1 / 4 _ * 1 / 4
\bm( b1 * 1 / 16 g1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 )
f1 * 1 / 8 g1 * 1 / 8 b1 * 1 / 1 c2 * 1 / 4
b1 * 1 / 16 g1 * 3 / 16 g1 * 1 / 16 f1 * 1 / 16 g1 * 1 / 8 _ * 3 / 16 \tieBegin:0 g1 * 1 / 16 g1 * 3 / 4 \tieEnd:0
c2 * 1 / 1 b1 * 1 / 1 g1 * 1 / 1 f#1 * 1 / 1
g1 * 1 / 16 _ * 3 / 16 _ * 1 / 4 _ * 1 / 4 _ * 1 / 4
g1 * 1 / 16 b1 * 1 / 16 c2 * 1 / 16 b1 * 1 / 16
\bm( b1 * 1 / 16 c2 * 1 / 16 b1 * 1 / 16 c2 * 1 / 16 b1 * 1 / 16 _ * 1 / 16 )
e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 e1 * 3 / 16 e1 * 1 / 16
_ * 3 /8 g2 * 3 / 8
e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 g0 * 3 / 16 e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16
f#1 * 3 / 4
e1 * 3 / 8 e1 * 3 / 8 e1 * 3 / 8 e1 * 3 / 8 e1 * 3 / 8 f#1 * 3 / 8 g1 * 3 / 8 a1 * 3 / 8 b1 * 1 / 8
e1 * 1 / 8  f#1 * 3 / 8 f#1 * 3 / 8 f#1 * 3 / 8 f#1 * 3 / 8 f#1 * 3 / 8 g1 * 3 / 8 a1 * 3 / 8 b1 * 1 / 4
e1 * 1 / 8 f#1 * 1 / 8  g1 * 3 / 8 g1 * 3 / 8 g1 * 3 / 8 g1 * 3 / 8 g1 * 3 / 8 a1 * 3 / 8 b1 * 1 / 8
e1 * 1 / 8 f#1 * 1 / 8 g1 * 1 / 8  a1 * 3 / 8 a1 * 3 / 8 a1 * 3 / 8 a1 * 3 / 8 a1 * 3 / 8 b1 * 3 / 8
e1 * 1 / 8 f#1 * 1 / 8 g1 * 1 / 8 a1 * 1 / 8 b1 * 3 / 8 b1 * 3 / 8 b1 * 3 / 8 b1 * 3 / 8 b1 * 3 / 8
e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 g1 * 1 / 8 e1 * 1 / 16 g1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16
e1 * 1 / 16 f#1 * 1 / 16 e1 * 1 / 16 f#1 * 1 / 16 e1 * 3 / 16 e1 * 1 / 16
e1 * 3 / 4 g1 * 3 / 4 c2 * 3 / 4
c2 * 3 / 2
\bm( g1 * 1 / 16 f1 * 1 / 16 g1 * 1 / 16 ) \bm( b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 f1 * 1 / 16 ) \bm( g1 * 1 / 16 b1 * 1 / 16 \tieBegin:0 f1 * 1 / 16 ) f1 * 3 / 4 \tieEnd:0 g1 * 3 / 8
g1 * 1 / 16 f1 * 1 / 16 _ * 1 / 8
\bm( g1 * 1 / 16 f1 * 1 / 16 )
f1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 _ * 1 / 8 _ * 1 / 4 _ * 1 / 4 _ * 1 / 4 b&1 * 1 / 4 g2 * 3 / 4 \bm( a2 * 1 / 8 \tieBegin:0 g2 * 1 / 8 ) \bm( g2 * 1 / 8 \tieEnd:0 b2 * 1 / 8 ) a2 * 3 / 8 g2 * 1 / 8 e2 * 3 / 4 g2 * 1 / 8 \tieBegin:0 f#2 * 1 / 8 f#2 * 3 / 4 \tieEnd:0 _ * 1 / 4 _ * 1 / 4 _ * 1 / 8 \tieBegin:0 e2 * 1 / 8 e2 * 1 / 2 \tieEnd:0 f2 * 3 / 2
\bm( f1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 g1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 b1 * 1 / 16 )
\bm( b1 * 1 / 16 g1 * 1 / 16 f1 * 1 / 16 ) \bm( g1 * 1 / 16 b1 * 1 / 16 c2 * 1 / 16 )
\bm( b1 * 1 / 16 f1 * 1 / 16 )
\bm( b1 * 1 / 16 g1 * 1 / 16 )
c2 * 1 / 1 b1 * 1 / 1 a1 * 1 / 1 c2 * 1 / 1
f2 * 1 / 16 e2 * 1 / 16 f2 * 1 / 16 e2 * 1 / 16 e2 * 1 / 8 e2 * 1 / 8 e2 * 1 / 8 f2 * 1 / 16 e2 * 1 / 16
f2 * 1 / 8 \tieBegin:0 e2 * 1 / 8 e2 * 1 / 8 \tieEnd:0 e2 * 1 / 8 c2 * 1 / 4
d2 * 1 / 4 d2 * 1 / 4 g1 * 1 / 4
g1 * 1 / 16 d2 * 1 / 16 e2 * 1 / 16 d2 * 1 / 16 _ * 1 / 8 g1 * 1 / 8 _ * 1 / 8 g1 * 1 / 8 _ * 1 / 8 g1 * 1 / 8 g1 * 1 / 16 d2 * 1 / 16 e2 * 1 / 16 d2 * 1 / 16
d2 * 1 / 16 e2 * 1 / 16 d2 * 1 / 8
g1 * 3 / 2 g1 * 1 / 1 \tieBegin:0 f1 * 1 / 1 f1 * 1 / 4 \tieEnd:0
\bm( f1 * 1 / 16   g1 * 1 / 16 b&1 * 1 / 16 g1 * 1 / 16 b&1 * 1 / 16 g1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 )
\bm( f1 * 1 / 16 g1 * 1 / 16 b&1 * 1 / 16 )
\bm( g1 * 1 / 16 b&1 * 1 / 16 )
\bm( b&1 * 1 / 16 g1 * 1 / 16 )
SCORE

START
'tstart
START

STOP
'tstop
'tgo 0
'imsg 'inc 'y 0
(reset! progress 0)
STOP

SETUP
(def tempo (js/prompt "Set the desired tempo in BPM / Introduce el tempo deseado en BPM" "100"))
(def progress (atom 0))
(when (= tempo "") (def tempo 100))
(def query-transp (js/prompt "Set the desired transposition note (Bb Eb F...) default: C / Introduce la transposici√≥n deseada (Eb Bb F...) por defecto: C" "C"))
(def query-octave (js/parseInt (js/prompt "Set an optional 8ve shift (1 -2...) default: 0 / Introduce el desplazamiento de 8va opcional (1 -2...) por defecto: 0" "0")))
'display 'modalLoading true
(def transp (str (case query-transp "Bb" "b&" "Eb" "e&" "F" "f" "c") (+ query-octave (if (= query-transp "Bb") 0 1))))
'tst tempo
'iclear
(def pats (range 1 54))
(def bounds (r 'ebl #"SCORE"))
(def lines (range (first bounds) (inc (last bounds))))
(def length 20)
(def step (/ length 53))
(def delta (/ tempo 100000))
(def start 0.6)
(def positions (range start (+ length start) step))
'isetx 'inc 'layer
(map #(r 'isetx (str 'inc/pat %1) 'gmn "expr(seq '[\\repeatBegin]' (seq (tail (transpose (seq '[c]' '[" (r 'er %2) "]') '[" transp "]') '[" transp "]')" "'[\\repeatEnd]'))") pats lines)
'itxt 'inc/title1 (str "TERRY RILEY IN C ( in " query-transp " )")
'imsg 'inc/title1 ['scale 2] ['y -0.5]
(map #(r 'isetx (str 'inc/lab %1) 'txt (str %1)) pats)
(map #(r 'imsg (str 'inc/pat %1) 'y %2) pats positions)
(map #(r 'imsg (str 'inc/lab %1) 'y %2) pats positions)
'imsg 'inc/pat* 'scale 0.6
'imsg 'inc/lab* ['scale 2] ['x -1.6]
'imsg 'inc/lab35 ['dy -0.2]
'isetx 'inc/time 'rect 1 1
'imsg 'inc/time 'show 0
'iwatch 'inc/time 'SMALL (r 'imsg 'inc 'dy (- delta) '--keep)
'iwatch 'inc/time 'STEP (r 'imsg 'inc 'dy (- step) '--keep)
'tconv 'conv "rsrc/x00y00.wav"
'tsp 'conv 'wet 'value 0.2
'tsynth 'b1 :-- 'conv
'tsynth 'b2 :-- 'conv
'tsp 'conv 'output 'gain 'value 0.3
'tlp 'metr (fn[t] (r 'tp 'b1 "C5" "32n" t (+ 0.1 (* 0.4 (rand)))) (r 'tp 'b2 "C6" "32n" t (+ 0.1 (* 0.4 (rand))))) "8n" 0.1 1200
'tlp 'info (fn[t] (r 'imsg 'inc/time 'event 'SMALL) (swap! progress inc) (r 'log (str "pos: " @progress " secs: " (r 'tsecs)))) "64n" (/ 300 tempo) 1200
'isetx 'control 'layer
'isetx 'control/bgn 'rect 4 0.18
'imsg 'control/bgn 'color 255 255 255 100
'ibtn 'control/start 'START "(r 'epl 'START)"
'ibtn 'control/stop 'STOP "(r 'epl 'STOP)"
'isld 'control/volmetr "Metr.Vol" 0 0.4 0.01 0.3 "#(r 'tsp 'conv 'output 'gain 'value %)"
'isld 'control/volback "Loading.Acmp..." 0 0 0 0 "#(str 'not-yet-loaded)"
'imsg 'control/start 'x -1.5
'imsg 'control/stop 'x -1.3
'imsg 'control/volmetr 'x 1
'imsg 'control/volback 'x 1.5
'imsg 'control/vol* 'scale 0.8
'imsg 'control ['y -0.9] ['z 1]
'tgrn 'back "rsrc/inC_backing.mp3" :onload (fn[] (r 'isld 'control/volback "Acmp.Vol" -40 10 0.2 0 "#(r 'tsp 'back 'volume 'value %)") (r 'display 'modalLoading false))
'tsp 'back 'playbackRate (/ tempo 100)
(. (.sync (r 'tg 'back)) start (/ 67.5 tempo))
SETUP
